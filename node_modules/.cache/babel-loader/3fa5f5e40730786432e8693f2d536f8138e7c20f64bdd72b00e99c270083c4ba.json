{"ast":null,"code":"/**\n * JS API\n * https://zlq4863947.gitbook.io/tradingview/3-shu-ju-bang-ding/js-api\n */\n\nexport class DataFeed {\n  constructor(options) {\n    this.options = void 0;\n    this.subscribers = {};\n    this.options = options;\n  }\n\n  /**\n   * 此方法可以设置图表库支持的图表配置。这些数据会影响到图表支持的功能\n   * @tips 图表初始化成功之后会回调这个函数,通过这个函数的callback参数传递DatafeedConfiguration配置给图表\n   */\n  async onReady(callback) {\n    return new Promise(resolve => resolve(void 0)).then(() => {\n      if (this.options.DatafeedConfiguration) {\n        callback(this.options.DatafeedConfiguration);\n      }\n    });\n  }\n\n  /**\n   * 提供一个匹配用户搜索的商品列表\n   * @tips 图表头部搜索框搜索商品时触发，可以在这个函数请求自己服务器的商品，然后通过onResult传递给图表\n   */\n  async searchSymbols(userInput, exchange, symbolType, onResult) {\n    // 如需请求自己服务器返回数据请添加相关代码\n    // Example\n    // fetch(`./api?userInput=${userInput}`, { method: \"GET\" }).then(\n    //   async (res) => {\n    //     const data: TradingView.SearchSymbolResultItem[] = await res.json();\n    //     onResult(data); // 返回结构请参考SearchSymbolResultItem类型\n    //   }\n    // );\n    return new Promise(resolve => resolve(void 0)).then(() => {\n      onResult([]);\n    });\n  }\n\n  /**\n   * 通过商品名称解析商品信息\n   * @tips 图表初始化成功之后会回调这个函数，可以在这个函数请求自己服务器的商品配置信息，然后通过onSymbolResolvedCallback传递给图表\n   */\n  async resolveSymbol(symbolName, onSymbolResolvedCallback, onResolveErrorCallback) {\n    // 如需请求自己服务器返回数据请添加相关代码，我这边在初始化图表的时候就请求服务端了，然后传递给了options对象\n    // Example\n    // fetch(`./api?symbolName=${symbolName}`, { method: \"GET\" }).then(\n    //   async (res) => {\n    //     const data: TradingView.LibrarySymbolInfo = await res.json();\n    //     onSymbolResolvedCallback(data); // 返回结构请参考LibrarySymbolInfo类型\n    //   }\n    // );\n    return new Promise(resolve => resolve(void 0)).then(() => {\n      if (this.options.SymbolInfo) {\n        onSymbolResolvedCallback(this.options.SymbolInfo);\n      } else {\n        onResolveErrorCallback(\"获取商品信息失败\");\n      }\n    });\n  }\n\n  /**\n   * 当图表库需要由日期范围定义的历史K线片段时，将调用此函数\n   * @tips 图表初始化成功之后会回调这个函数,可以在这个函数请求自己服务器的历史k线数据，然后通过onResult传递给图表\n   */\n  async getBars(symbolInfo, resolution, periodParams, onResult, onError) {\n    if (!this.options.getBars) {\n      return new Promise(resolve => resolve(void 0)).then(() => {\n        onResult([]);\n      });\n    }\n    return this.options.getBars(symbolInfo, resolution, periodParams, onResult, onError);\n  }\n\n  /**\n   * 订阅K线数据。图表库将调用onRealtimeCallback方法以更新实时数据\n   * @tips 图表加载历史k线成功之后会回调这个函数\n   */\n  subscribeBars(symbolInfo, resolution, onRealtimeCallback, subscriberUID, onResetCacheNeededCallback) {\n    if (this.subscribers[subscriberUID]) {\n      return;\n    }\n    this.subscribers[subscriberUID] = {\n      lastBarTime: null,\n      listener: onRealtimeCallback,\n      resolution: resolution,\n      symbolInfo: symbolInfo\n    };\n  }\n\n  /**\n   * 取消订阅K线数据\n   */\n  unsubscribeBars(subscriberUID) {\n    if (!this.subscribers[subscriberUID]) {\n      return;\n    }\n    delete this.subscribers[subscriberUID];\n  }\n\n  /**\n   * DataFeed 关键函数，我们通过这个函数传递实时数据给图表\n   *  @tips 该函数不是JS API要求的函数，而是我们自己扩展的函数\n   */\n  updateBar(bar) {\n    for (const listenerGuid in this.subscribers) {\n      const subscriptionRecord = this.subscribers[listenerGuid];\n      if (subscriptionRecord.lastBarTime !== null && bar.time < subscriptionRecord.lastBarTime) {\n        // 如果实时数据时间小于最后一根k线的时间则跳过更新\n        continue;\n      }\n      subscriptionRecord.lastBarTime = bar.time;\n      subscriptionRecord.listener(bar);\n    }\n  }\n\n  /**\n   * 图表库调用这个函数来获得可见的K线范围的标记\n   * @tips 如果DatafeedConfiguration开启了k线标记则图表会回调这个函数，通过onDataCallback返回标记数据给图表渲染\n   */\n  async getMarks(symbolInfo, startDate, endDate, onDataCallback, resolution) {\n    // 如需请求自己服务器返回数据请添加相关代码\n    // Example\n    // fetch(`./api?symbolName=${symbolName}`, { method: \"GET\" }).then(\n    //   async (res) => {\n    //     const data: TradingView.Mark[] = await res.json();\n    //     onDataCallback(data);\n    //   }\n    // );\n  }\n\n  /**\n   * 图表库调用此函数获取可见K线范围的时间刻度标记\n   * @tips 如果DatafeedConfiguration开启时间刻度标记则图表会回调这个函数，通过onDataCallback返回标记数据给图表渲染\n   */\n  async getTimescaleMarks(symbolInfo, startDate, endDate, onDataCallback, resolution) {\n    // 如需请求自己服务器返回数据请添加相关代码\n    // Example\n    // fetch(`./api?symbolName=${symbolName}`, { method: \"GET\" }).then(\n    //   async (res) => {\n    //     const data: TradingView.TimescaleMark[] = await res.json();\n    //     onDataCallback(data);\n    //   }\n    // );\n  }\n\n  /**\n   * 当图表需要知道服务器时间时，DatafeedConfiguration配置supports_time设置为true，则调用此函数\n   * @tips 如果DatafeedConfiguration开启服务器时间则图表会回调这个函数，通过callback返回服务器时间给图表\n   */\n  getServerTime(callback) {\n    // 如需请求自己服务器返回数据请添加相关代码\n    // Example\n    // fetch(`./api?symbolName=${symbolName}`, { method: \"GET\" }).then(\n    //   async (res) => {\n    //     const data: TradingView.ServerTimeCallback = await res.json();\n    //     callback(data);\n    //   }\n    // );\n  }\n}","map":{"version":3,"names":["DataFeed","constructor","options","subscribers","onReady","callback","Promise","resolve","then","DatafeedConfiguration","searchSymbols","userInput","exchange","symbolType","onResult","resolveSymbol","symbolName","onSymbolResolvedCallback","onResolveErrorCallback","SymbolInfo","getBars","symbolInfo","resolution","periodParams","onError","subscribeBars","onRealtimeCallback","subscriberUID","onResetCacheNeededCallback","lastBarTime","listener","unsubscribeBars","updateBar","bar","listenerGuid","subscriptionRecord","time","getMarks","startDate","endDate","onDataCallback","getTimescaleMarks","getServerTime"],"sources":["/home/jeff/project1/tv/src/datafeed/index.ts"],"sourcesContent":["/**\n * JS API\n * https://zlq4863947.gitbook.io/tradingview/3-shu-ju-bang-ding/js-api\n */\n\nexport interface DataFeedOptions {\n  SymbolInfo?: TradingView.LibrarySymbolInfo;\n  DatafeedConfiguration?: TradingView.DatafeedConfiguration;\n  getBars?: TradingView.IDatafeedChartApi[\"getBars\"];\n}\n\nexport interface DataSubscriber {\n  symbolInfo: TradingView.LibrarySymbolInfo;\n  resolution: string;\n  lastBarTime: number | null;\n  listener: TradingView.SubscribeBarsCallback;\n}\n\nexport class DataFeed\n  implements TradingView.IExternalDatafeed, TradingView.IDatafeedChartApi\n{\n  private options: DataFeedOptions;\n  private subscribers: Record<string, DataSubscriber> = {};\n\n  constructor(options: DataFeedOptions) {\n    this.options = options;\n  }\n\n  /**\n   * 此方法可以设置图表库支持的图表配置。这些数据会影响到图表支持的功能\n   * @tips 图表初始化成功之后会回调这个函数,通过这个函数的callback参数传递DatafeedConfiguration配置给图表\n   */\n  public async onReady(callback: TradingView.OnReadyCallback) {\n    return new Promise((resolve) => resolve(void 0)).then(() => {\n      if (this.options.DatafeedConfiguration) {\n        callback(this.options.DatafeedConfiguration);\n      }\n    });\n  }\n\n  /**\n   * 提供一个匹配用户搜索的商品列表\n   * @tips 图表头部搜索框搜索商品时触发，可以在这个函数请求自己服务器的商品，然后通过onResult传递给图表\n   */\n  public async searchSymbols(\n    userInput: string,\n    exchange: string,\n    symbolType: string,\n    onResult: TradingView.SearchSymbolsCallback\n  ) {\n    // 如需请求自己服务器返回数据请添加相关代码\n    // Example\n    // fetch(`./api?userInput=${userInput}`, { method: \"GET\" }).then(\n    //   async (res) => {\n    //     const data: TradingView.SearchSymbolResultItem[] = await res.json();\n    //     onResult(data); // 返回结构请参考SearchSymbolResultItem类型\n    //   }\n    // );\n    return new Promise((resolve) => resolve(void 0)).then(() => {\n      onResult([]);\n    });\n  }\n\n  /**\n   * 通过商品名称解析商品信息\n   * @tips 图表初始化成功之后会回调这个函数，可以在这个函数请求自己服务器的商品配置信息，然后通过onSymbolResolvedCallback传递给图表\n   */\n  public async resolveSymbol(\n    symbolName: string,\n    onSymbolResolvedCallback: TradingView.ResolveCallback,\n    onResolveErrorCallback: TradingView.ErrorCallback\n  ) {\n    // 如需请求自己服务器返回数据请添加相关代码，我这边在初始化图表的时候就请求服务端了，然后传递给了options对象\n    // Example\n    // fetch(`./api?symbolName=${symbolName}`, { method: \"GET\" }).then(\n    //   async (res) => {\n    //     const data: TradingView.LibrarySymbolInfo = await res.json();\n    //     onSymbolResolvedCallback(data); // 返回结构请参考LibrarySymbolInfo类型\n    //   }\n    // );\n    return new Promise((resolve) => resolve(void 0)).then(() => {\n      if (this.options.SymbolInfo) {\n        onSymbolResolvedCallback(this.options.SymbolInfo);\n      } else {\n        onResolveErrorCallback(\"获取商品信息失败\");\n      }\n    });\n  }\n\n  /**\n   * 当图表库需要由日期范围定义的历史K线片段时，将调用此函数\n   * @tips 图表初始化成功之后会回调这个函数,可以在这个函数请求自己服务器的历史k线数据，然后通过onResult传递给图表\n   */\n  public async getBars(\n    symbolInfo: TradingView.LibrarySymbolInfo,\n    resolution: TradingView.ResolutionString,\n    periodParams: TradingView.PeriodParams,\n    onResult: TradingView.HistoryCallback,\n    onError: TradingView.ErrorCallback\n  ) {\n    if (!this.options.getBars) {\n      return new Promise((resolve) => resolve(void 0)).then(() => {\n        onResult([]);\n      });\n    }\n    return this.options.getBars(\n      symbolInfo,\n      resolution,\n      periodParams,\n      onResult,\n      onError\n    );\n  }\n\n  /**\n   * 订阅K线数据。图表库将调用onRealtimeCallback方法以更新实时数据\n   * @tips 图表加载历史k线成功之后会回调这个函数\n   */\n  public subscribeBars(\n    symbolInfo: TradingView.LibrarySymbolInfo,\n    resolution: string,\n    onRealtimeCallback: TradingView.SubscribeBarsCallback,\n    subscriberUID: string,\n    onResetCacheNeededCallback: () => void\n  ) {\n    if (this.subscribers[subscriberUID]) {\n      return;\n    }\n    this.subscribers[subscriberUID] = {\n      lastBarTime: null,\n      listener: onRealtimeCallback,\n      resolution: resolution,\n      symbolInfo: symbolInfo,\n    };\n  }\n\n  /**\n   * 取消订阅K线数据\n   */\n  public unsubscribeBars(subscriberUID: string) {\n    if (!this.subscribers[subscriberUID]) {\n      return;\n    }\n    delete this.subscribers[subscriberUID];\n  }\n\n  /**\n   * DataFeed 关键函数，我们通过这个函数传递实时数据给图表\n   *  @tips 该函数不是JS API要求的函数，而是我们自己扩展的函数\n   */\n  public updateBar(bar: TradingView.Bar) {\n    for (const listenerGuid in this.subscribers) {\n      const subscriptionRecord = this.subscribers[listenerGuid];\n      if (\n        subscriptionRecord.lastBarTime !== null &&\n        bar.time < subscriptionRecord.lastBarTime\n      ) {\n        // 如果实时数据时间小于最后一根k线的时间则跳过更新\n        continue;\n      }\n      subscriptionRecord.lastBarTime = bar.time;\n      subscriptionRecord.listener(bar);\n    }\n  }\n\n  /**\n   * 图表库调用这个函数来获得可见的K线范围的标记\n   * @tips 如果DatafeedConfiguration开启了k线标记则图表会回调这个函数，通过onDataCallback返回标记数据给图表渲染\n   */\n  public async getMarks(\n    symbolInfo: TradingView.LibrarySymbolInfo,\n    startDate: number,\n    endDate: number,\n    onDataCallback: TradingView.GetMarksCallback<TradingView.Mark>,\n    resolution: string\n  ) {\n    // 如需请求自己服务器返回数据请添加相关代码\n    // Example\n    // fetch(`./api?symbolName=${symbolName}`, { method: \"GET\" }).then(\n    //   async (res) => {\n    //     const data: TradingView.Mark[] = await res.json();\n    //     onDataCallback(data);\n    //   }\n    // );\n  }\n\n  /**\n   * 图表库调用此函数获取可见K线范围的时间刻度标记\n   * @tips 如果DatafeedConfiguration开启时间刻度标记则图表会回调这个函数，通过onDataCallback返回标记数据给图表渲染\n   */\n  public async getTimescaleMarks(\n    symbolInfo: TradingView.LibrarySymbolInfo,\n    startDate: number,\n    endDate: number,\n    onDataCallback: TradingView.GetMarksCallback<TradingView.TimescaleMark>,\n    resolution: string\n  ) {\n    // 如需请求自己服务器返回数据请添加相关代码\n    // Example\n    // fetch(`./api?symbolName=${symbolName}`, { method: \"GET\" }).then(\n    //   async (res) => {\n    //     const data: TradingView.TimescaleMark[] = await res.json();\n    //     onDataCallback(data);\n    //   }\n    // );\n  }\n\n  /**\n   * 当图表需要知道服务器时间时，DatafeedConfiguration配置supports_time设置为true，则调用此函数\n   * @tips 如果DatafeedConfiguration开启服务器时间则图表会回调这个函数，通过callback返回服务器时间给图表\n   */\n  public getServerTime(callback: TradingView.ServerTimeCallback) {\n    // 如需请求自己服务器返回数据请添加相关代码\n    // Example\n    // fetch(`./api?symbolName=${symbolName}`, { method: \"GET\" }).then(\n    //   async (res) => {\n    //     const data: TradingView.ServerTimeCallback = await res.json();\n    //     callback(data);\n    //   }\n    // );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}